
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;


entity ro_puf is
generic(
width:integer:= 8);
port(
en:IN STD_LOGIC;
challenge:IN STD_LOGIC_VECTOR(3 downto 0);
final_output: OUT STD_LOGIC);
end ro_puf;

architecture Behavioral of ro_puf is


component ring_o_bank
port(
en: IN STD_LOGIC;
ro_bank_out: OUT STD_LOGIC_VECTOR(0 to 3));
end component;

component mux
PORT (
mux_in: IN STD_LOGIC_VECTOR(0 to 3);
challenge: IN STD_LOGIC_VECTOR(1 downto 0);
mux_out: OUT STD_LOGIC);
end component;

component counter
port(
count_clk: in std_logic;
rst:in std_logic;
count: inout std_logic_vector(7 downto 0)
);
end component;

component comparator
port (
    val_a    : in  std_logic_vector(WIDTH-1 downto 0);
    val_b    : in  std_logic_vector(WIDTH-1 downto 0);
    solution : out std_logic);
    end component;
    
   
  type double_array1 is array (0 to 1) of std_logic_vector(0 to 3);  
 signal temp_path1: double_array1; -- for outputs of ro banks
 signal temp_path2: STD_LOGIC; -- multiplexer 1 output
 signal temp_path3: std_logic; -- multiplexer 2 output
type double_array is array (0 to 1) of std_logic_vector(7 downto 0); 
 signal temp_path4: double_array; -- output of 2 counters
 signal mux1_in: std_logic_vector(0 to 1); -- mux1 input
 signal mux2_in: std_logic_vector(0 to 1    ); -- mux2 input
 attribute dont_touch : string;
attribute dont_touch of temp_path1 : signal is "true";
attribute dont_touch of temp_path2 : signal is "true";
attribute dont_touch of temp_path3 : signal is "true";
attribute dont_touch of temp_path4 : signal is "true";


begin
system: for i in 0 to 1 
GENERATE
Ring_Osc_Bank: ring_o_bank PORT MAP(
en=>en,
ro_bank_out=>temp_path1(i));
end generate;
mux1_in(0)<=challenge(0);
mux1_in(1)<=challenge(1);
mux2_in(0)<=challenge(2);
mux2_in(1)<=challenge(3);

Multiplexer1: mux PORT MAP(
mux_in=> temp_path1(0),
challenge=> mux1_in,
mux_out=> temp_path2);

Multiplexer2: mux PORT MAP(
mux_in=> temp_path1(1),
challenge=>mux2_in,
mux_out=> temp_path3);

Counter1: counter PORT MAP(
count_clk=> temp_path2,
rst=>'1',
count=>temp_path4(0));
Counter2: counter PORT MAP(
count_clk=> temp_path3,
rst=>'1',
count=>temp_path4(1));
sys_comparator: comparator PORT MAP(
val_a=>temp_path4(0),
val_b=>temp_path4(1),
solution=>final_output
);
end Behavioral;
